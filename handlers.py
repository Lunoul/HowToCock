from aiogram import types
from dispatcher import dp
from db import get_user
from keyboards import methods_keyboard, back_to_menu_keyboard, start_keyboard
from utils import read_file, split_long_text
from states import UserState
import datetime

async def handle_back_to_menu(callback: types.CallbackQuery):
    await callback.message.edit_text("*–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ –∏ –ø–æ–∏—Å–∫–∞ –Ω—É–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!*", reply_markup=start_keyboard)
async def handle_profile(callback: types.CallbackQuery):
    user_data = await get_user(callback.from_user.id)
    first_start = datetime.datetime.strptime(user_data['first_start'], '%Y-%m-%d')
    profile_text = f"üë§ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ:*\n*–í–∞—à ID:* {user_data['user_id']}\n*–î–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞:* {first_start.strftime('%Y-%m-%d')}"
    await callback.message.edit_text(profile_text, reply_markup=back_to_menu_keyboard)

async def handle_methods(callback: types.CallbackQuery):
    await callback.message.edit_text("‚¨áÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞:*", reply_markup=methods_keyboard)

async def handle_method(callback: types.CallbackQuery):
    method = callback.data
    file_content = read_file(method)
    text_chunks = split_long_text(file_content)
    for chunk in text_chunks:
        try:
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ
            await callback.message.answer(chunk, reply_markup=back_to_menu_keyboard, disable_web_page_preview=True, parse_mode="HTML")
        except aiogram.utils.exceptions.MessageTextIsEmpty:
            await callback.message.edit_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")
            break

handlers = {
    "profile": handle_profile,
    "methods": handle_methods,
    "back_to_menu": handle_back_to_menu,
    "username": handle_method,
    "phone_number": handle_method,
    "fullname": handle_method,
    "car_number": handle_method,
    "face_scan": handle_method,
}

__all__ = ["handlers"]  # –≠–∫—Å–ø–æ—Ä—Ç —Å–ª–æ–≤–∞—Ä—è handlers

@dp.callback_query_handler(state=UserState.idle)
async def process_action(callback: types.CallbackQuery):
    action = callback.data
    handler = handlers.get(action)
    if handler:
        await handler(callback)